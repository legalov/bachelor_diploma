using System;
using System.IO;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using System.ComponentModel.DataAnnotations;
using System.Threading.Tasks;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using Microsoft.AspNetCore.Mvc;
using Microsoft.IdentityModel.Tokens;
using Microsoft.AspNetCore.Identity;
using Microsoft.Extensions.Options;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.Authorization;

using Database.Domain;

namespace Database.Controllers
{
    [ApiController]
    [Route("[controller]")]
    public class AuthManagementController : ControllerBase
    {
        private readonly UserManager<IdentityUser> _userManager;
        private readonly string _jwt_token;

        public AuthManagementController(UserManager<IdentityUser> userManager)
        {
            _userManager = userManager;
            _jwt_token = Environment.GetEnvironmentVariable("JWT_TOKEN");
        }

        [HttpGet("RegisterFirst")]
        [AllowAnonymous]
        [ProducesResponseType(200)]
        [ProducesResponseType(400)]
        [ProducesResponseType(500)]
        public async Task<ActionResult> RegisterFirst()
        {
            var email = Environment.GetEnvironmentVariable("FIRST_EMAIL");
            // check i the user with the same email exist
            var existingUser = await _userManager.FindByEmailAsync(email);

            if (existingUser != null)
            {
                return BadRequest("Email already exist");
            }

            var password = Environment.GetEnvironmentVariable("FIRST_PASSWORD");
            var newUser = new IdentityUser() { Email = email, UserName = email };
            var isCreated = await _userManager.CreateAsync(newUser, password);
            if (isCreated.Succeeded)
            {
                return Ok();
            }
            return StatusCode(500, isCreated.Errors.ToList());
        }

        [HttpPost("Register")]
        [Authorize(AuthenticationSchemes = JwtBearerDefaults.AuthenticationScheme)]
        [ProducesResponseType(200)]
        [ProducesResponseType(400)]
        [ProducesResponseType(500)]
        public async Task<ActionResult<AuthResult>> Register(
            [FromBody, Required] string email,
            [FromBody, Required] string password
        )
        {
            // check i the user with the same email exist
            var existingUser = await _userManager.FindByEmailAsync(email);

            if (existingUser != null)
            {
                return BadRequest("Email already exist");
            }

            var newUser = new IdentityUser() { Email = email, UserName = email };
            var isCreated = await _userManager.CreateAsync(newUser, password);
            if (isCreated.Succeeded)
            {
                var jwtToken = GenerateJwtToken(newUser, out int lifetime);

                return Ok(new AuthResult()
                {
                    Token = jwtToken,
                    Expires = lifetime,
                });
            }
            return StatusCode(500, isCreated.Errors.ToList());
        }

        private string GenerateJwtToken(IdentityUser user, out int lifetime)
        {
            // Now its ime to define the jwt token which will be responsible of creating our tokens
            var jwtTokenHandler = new JwtSecurityTokenHandler();

            // We get our secret from the appsettings
            var key = Encoding.ASCII.GetBytes(_jwt_token);

            // we define our token descriptor
            // We need to utilise claims which are properties in our token which gives information about the token
            // which belong to the specific user who it belongs to
            // so it could contain their id, name, email the good part is that these information
            // are generated by our server and identity framework which is valid and trusted
            lifetime = Int32.Parse(Environment.GetEnvironmentVariable("TOKEN_LIFETIME"));
            var tokenDescriptor = new SecurityTokenDescriptor
            {
                Subject = new ClaimsIdentity(new[]
                {
                    new Claim("Id", user.Id),
                    new Claim(JwtRegisteredClaimNames.Sub, user.Email),
                    new Claim(JwtRegisteredClaimNames.Email, user.Email),
                    new Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString())
                }),
                Expires = DateTime.UtcNow.AddSeconds(lifetime),
                // here we are adding the encryption alogorithim information which will be used to decrypt our token
                SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha512Signature)
            };

            var token = jwtTokenHandler.CreateToken(tokenDescriptor);

            return jwtTokenHandler.WriteToken(token);
        }

        [AllowAnonymous]
        [HttpPost("Login")]
        [ProducesResponseType(200)]
        [ProducesResponseType(400)]
        [ProducesResponseType(404)]
        public async Task<ActionResult<AuthResult>> Login(
            [FromBody, Required] string email,
            [FromBody, Required] string password
        )
        {
            IdentityUser existingUser;
            // check if the user with the same email exist
            try
            {
                existingUser = await _userManager.FindByEmailAsync(email);
            }
            catch (Exception)
            {
                return NotFound();
            }

            if (existingUser == null)
            {
                // We dont want to give to much information on why the request has failed for security reasons
                return BadRequest("Invalid authentication request");
            }

            // Now we need to check if the user has inputed the right password
            var isCorrect = await _userManager.CheckPasswordAsync(existingUser, password);

            if (isCorrect)
            {
                var jwtToken = GenerateJwtToken(existingUser, out int lifetime);

                return Ok(new AuthResult()
                {
                    Token = jwtToken,
                    Expires = lifetime
                });
            }
            else
            {
                // We dont want to give to much information on why the request has failed for security reasons
                return BadRequest("Invalid authentication request");
            }
        }
    }
}